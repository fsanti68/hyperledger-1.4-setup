
version: '2'

networks:
    behave:

services:

    ca.company.com:
        image: hyperledger/fabric-ca
        environment:
            - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
            - FABRIC_CA_SERVER_CA_NAME=ca.company.com
            - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.producer.company.com-cert.pem
            - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/e92ef8b3d04d0badfa852d72c0f4ad4503513bcd6b4ca28aabbee98d5adfad0c_sk
        ports:
            - "7054:7054"
        command: sh -c 'fabric-ca-server start -b admin:adminpw'
        volumes:
            - ./crypto-config/peerOrganizations/producer.company.com/ca/:/etc/hyperledger/fabric-ca-server-config
        container_name: ca.company.com
        networks:
          behave:
             aliases:
               - ${CORE_PEER_NETWORKID}

    zookeeper0:
        extends:
            file: docker-compose-base.yml
            service: zookeeper
        container_name: zookeeper0
        environment:
            - ZOO_MY_ID=1
            - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
        networks:
          behave:
             aliases:
               - ${CORE_PEER_NETWORKID}

    zookeeper1:
        extends:
            file: docker-compose-base.yml
            service: zookeeper
        container_name: zookeeper1
        environment:
            - ZOO_MY_ID=2
            - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
        networks:
          behave:
             aliases:
               - ${CORE_PEER_NETWORKID}

    zookeeper2:
        extends:
            file: docker-compose-base.yml
            service: zookeeper
        container_name: zookeeper2
        environment:
            - ZOO_MY_ID=3
            - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
        networks:
          behave:
             aliases:
               - ${CORE_PEER_NETWORKID}

    kafka0:
        extends:
            file: docker-compose-base.yml
            service: kafka
        container_name: kafka0
        environment:
            - KAFKA_BROKER_ID=0
            - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
            - KAFKA_MESSAGE_MAX_BYTES=${KAFKA_MESSAGE_MAX_BYTES}
            - KAFKA_REPLICA_FETCH_MAX_BYTES=${KAFKA_REPLICA_FETCH_MAX_BYTES}
            - KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES=${KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES}
        depends_on:
            - zookeeper0
            - zookeeper1
            - zookeeper2
        networks:
          behave:
             aliases:
               - ${CORE_PEER_NETWORKID}

    kafka1:
        extends:
            file: docker-compose-base.yml
            service: kafka
        container_name: kafka1
        environment:
            - KAFKA_BROKER_ID=1
            - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
            - KAFKA_MESSAGE_MAX_BYTES=${KAFKA_MESSAGE_MAX_BYTES}
            - KAFKA_REPLICA_FETCH_MAX_BYTES=${KAFKA_REPLICA_FETCH_MAX_BYTES}
            - KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES=${KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES}
        depends_on:
            - zookeeper0
            - zookeeper1
            - zookeeper2
        networks:
          behave:
             aliases:
               - ${CORE_PEER_NETWORKID}

    kafka2:
        extends:
            file: docker-compose-base.yml
            service: kafka
        container_name: kafka2
        environment:
            - KAFKA_BROKER_ID=2
            - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
            - KAFKA_MESSAGE_MAX_BYTES=${KAFKA_MESSAGE_MAX_BYTES}
            - KAFKA_REPLICA_FETCH_MAX_BYTES=${KAFKA_REPLICA_FETCH_MAX_BYTES}
            - KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES=${KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES}
        depends_on:
            - zookeeper0
            - zookeeper1
            - zookeeper2
        networks:
          behave:
             aliases:
               - ${CORE_PEER_NETWORKID}

    kafka3:
        extends:
            file: docker-compose-base.yml
            service: kafka
        container_name: kafka3
        environment:
            - KAFKA_BROKER_ID=3
            - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
            - KAFKA_MESSAGE_MAX_BYTES=${KAFKA_MESSAGE_MAX_BYTES}
            - KAFKA_REPLICA_FETCH_MAX_BYTES=${KAFKA_REPLICA_FETCH_MAX_BYTES}
            - KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES=${KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES}
        depends_on:
            - zookeeper0
            - zookeeper1
            - zookeeper2
        networks:
          behave:
             aliases:
               - ${CORE_PEER_NETWORKID}

    orderer0.company.com:
        extends:
            file: docker-compose-base.yml
            service: orderer
        container_name: orderer0.company.com
        environment:
            - ORDERER_HOST=orderer0.company.com
            - CONFIGTX_ORDERER_ORDERERTYPE=kafka
            - CONFIGTX_ORDERER_KAFKA_BROKERS=[kafka0:9092,kafka1:9092,kafka2:9092,kafka3:9092]
            - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
            - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
            - ORDERER_KAFKA_VERBOSE=true
            - ORDERER_GENERAL_GENESISPROFILE=SampleInsecureKafka
            - ORDERER_ABSOLUTEMAXBYTES=${ORDERER_ABSOLUTEMAXBYTES}
            - ORDERER_PREFERREDMAXBYTES=${ORDERER_PREFERREDMAXBYTES}
        volumes:
            - ./crypto-config/ordererOrganizations/company.com/orderers/orderer0.company.com/msp:/var/hyperledger/msp
            - ./crypto-config/ordererOrganizations/company.com/orderers/orderer0.company.com/tls:/var/hyperledger/tls
            - orderer0.company.com:/var/hyperledger/production/orderer
        depends_on:
            - kafka0
            - kafka1
            - kafka2
            - kafka3
        networks:
          behave:
             aliases:
               - ${CORE_PEER_NETWORKID}
        ports:
          - 7050:7050

    orderer1.company.com:
        extends:
            file: docker-compose-base.yml
            service: orderer
        container_name: orderer1.company.com
        environment:
            - ORDERER_HOST=orderer1.company.com
            - CONFIGTX_ORDERER_ORDERERTYPE=kafka
            - CONFIGTX_ORDERER_KAFKA_BROKERS=[kafka0:9092,kafka1:9092,kafka2:9092,kafka3:9092]
            - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
            - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
            - ORDERER_KAFKA_RETRY_LONGINTERVAL=30s
            - ORDERER_KAFKA_RETRY_LONGTOTAL=5m
            - ORDERER_KAFKA_VERBOSE=true
            - ORDERER_GENERAL_GENESISPROFILE=SampleInsecureKafka
            - ORDERER_ABSOLUTEMAXBYTES=${ORDERER_ABSOLUTEMAXBYTES}
            - ORDERER_PREFERREDMAXBYTES=${ORDERER_PREFERREDMAXBYTES}
        volumes:
            - ./crypto-config/ordererOrganizations/company.com/orderers/orderer1.company.com/msp:/var/hyperledger/msp
            - ./crypto-config/ordererOrganizations/company.com/orderers/orderer1.company.com/tls:/var/hyperledger/tls
            - orderer1.company.com:/var/hyperledger/production/orderer
        depends_on:
            - kafka0
            - kafka1
            - kafka2
            - kafka3
        networks:
          behave:
             aliases:
               - ${CORE_PEER_NETWORKID}
        ports:
          - 8050:7050

    orderer2.company.com:
        extends:
            file: docker-compose-base.yml
            service: orderer
        container_name: orderer2.company.com
        environment:
            - ORDERER_HOST=orderer2.company.com
            - CONFIGTX_ORDERER_ORDERERTYPE=kafka
            - CONFIGTX_ORDERER_KAFKA_BROKERS=[kafka0:9092,kafka1:9092,kafka2:9092,kafka3:9092]
            - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
            - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
            - ORDERER_KAFKA_VERBOSE=true
            - ORDERER_GENERAL_GENESISPROFILE=SampleInsecureKafka
            - ORDERER_ABSOLUTEMAXBYTES=${ORDERER_ABSOLUTEMAXBYTES}
            - ORDERER_PREFERREDMAXBYTES=${ORDERER_PREFERREDMAXBYTES}
        volumes:
            - ./crypto-config/ordererOrganizations/company.com/orderers/orderer2.company.com/msp:/var/hyperledger/msp
            - ./crypto-config/ordererOrganizations/company.com/orderers/orderer2.company.com/tls:/var/hyperledger/tls
            -  orderer2.company.com:/var/hyperledger/production/orderer
        depends_on:
            - kafka0
            - kafka1
            - kafka2
            - kafka3
        networks:
          behave:
             aliases:
               - ${CORE_PEER_NETWORKID}
        ports:
          - 9050:7050

    peer0.producer.company.com:
        extends:
            file: docker-compose-base.yml
            service: peer
        container_name: peer0.producer.company.com
        environment:
            - CORE_PEER_CHAINCODELISTENADDRESS=peer0.producer.company.com:7052
            - CORE_PEER_ID=peer0.producer.company.com
            - CORE_PEER_ADDRESS=peer0.producer.company.com:7051
            - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.producer.company.com:7051
            - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.producer.company.com:7051
            - CORE_PEER_GOSSIP_ORGLEADER=${CORE_PEER_GOSSIP_ORGLEADER_PEER0_PRODUCER}
            - CORE_PEER_GOSSIP_USELEADERELECTION=${CORE_PEER_GOSSIP_USELEADERELECTION_PEER0_PRODUCER}
            - CORE_PEER_LOCALMSPID=ProducerMSP
            - CORE_PEER_TLS_CLIENTROOTCAS_FILES=/var/hyperledger/users/Admin@producer.company.com/tls/ca.crt
            - CORE_PEER_TLS_CLIENTCERT_FILE=/var/hyperledger/users/Admin@producer.company.com/tls/client.crt
            - CORE_PEER_TLS_CLIENTKEY_FILE=/var/hyperledger/users/Admin@producer.company.com/tls/client.key
        volumes:
            - ./crypto-config/peerOrganizations/company.company.com/peers/peer0.company.company.com/msp:/var/hyperledger/msp
            - ./crypto-config/peerOrganizations/company.company.com/peers/peer0.company.company.com/tls:/var/hyperledger/tls
            - ./crypto-config/peerOrganizations/company.company.com/users:/var/hyperledger/users
            - peer0.provider.company.com:/var/hyperledger/production

        depends_on:
            - orderer0.company.com
            - orderer1.company.com
            - orderer2.company.com
        networks:
          behave:
             aliases:
               - ${CORE_PEER_NETWORKID}
        ports:
          - 7051:7051
          - 7053:7053

    peer1.producer.company.com:
        extends:
            file: docker-compose-base.yml
            service: peer
        container_name: peer1.producer.company.com
        environment:
            - CORE_PEER_CHAINCODELISTENADDRESS=peer1.producer.company.com:7052
            - CORE_PEER_ID=peer1.producer.company.com
            - CORE_PEER_ADDRESS=peer1.producer.company.com:7051
            - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.producer.company.com:7051
            - CORE_PEER_GOSSIP_ORGLEADER=${CORE_PEER_GOSSIP_ORGLEADER_PEER1_PRODUCER}
            - CORE_PEER_GOSSIP_USELEADERELECTION=${CORE_PEER_GOSSIP_USELEADERELECTION_PEER1_PRODUCER}
            - CORE_PEER_LOCALMSPID=ProducerMSP
            - CORE_PEER_TLS_CLIENTROOTCAS_FILES=/var/hyperledger/users/Admin@producer.company.com/tls/ca.crt
            - CORE_PEER_TLS_CLIENTCERT_FILE=/var/hyperledger/users/Admin@producer.company.com/tls/client.crt
            - CORE_PEER_TLS_CLIENTKEY_FILE=/var/hyperledger/users/Admin@producer.company.com/tls/client.key
        volumes:
            - ./crypto-config/peerOrganizations/producer.company.com/peers/peer1.producer.company.com/msp:/var/hyperledger/msp
            - ./crypto-config/peerOrganizations/producer.company.com/peers/peer1.producer.company.com/tls:/var/hyperledger/tls
            - ./crypto-config/peerOrganizations/producer.company.com/users:/var/hyperledger/users
            - peer1.provider.company.com:/var/hyperledger/production
        depends_on:
            - orderer0.company.com
            - orderer1.company.com
            - orderer2.company.com
            - peer0.producer.company.com
        networks:
          behave:
             aliases:
               - ${CORE_PEER_NETWORKID}
        ports:
          - 8051:7051
          - 8053:7053


    peer2.producer.company.com:
        extends:
            file: docker-compose-base.yml
            service: peer
        container_name: peer2.producer.company.com
        environment:
            - CORE_PEER_CHAINCODELISTENADDRESS=peer2.producer.company.com:7052
            - CORE_PEER_ID=peer2.producer.company.com
            - CORE_PEER_ADDRESS=peer2.producer.company.com:7051
            - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.producer.company.com:7051
            - CORE_PEER_GOSSIP_ORGLEADER=${CORE_PEER_GOSSIP_ORGLEADER_PEER2_PRODUCER}
            - CORE_PEER_GOSSIP_USELEADERELECTION=${CORE_PEER_GOSSIP_USELEADERELECTION_PEER2_PRODUCER}
            - CORE_PEER_LOCALMSPID=ProducerMSP
            - CORE_PEER_TLS_CLIENTROOTCAS_FILES=/var/hyperledger/users/Admin@producer.company.com/tls/ca.crt
            - CORE_PEER_TLS_CLIENTCERT_FILE=/var/hyperledger/users/Admin@producer.company.com/tls/client.crt
            - CORE_PEER_TLS_CLIENTKEY_FILE=/var/hyperledger/users/Admin@producer.company.com/tls/client.key
        volumes:
            - ./crypto-config/peerOrganizations/producer.company.com/peers/peer2.producer.company.com/msp:/var/hyperledger/msp
            - ./crypto-config/peerOrganizations/producer.company.com/peers/peer2.producer.company.com/tls:/var/hyperledger/tls
            - ./crypto-config/peerOrganizations/producer.company.com/users:/var/hyperledger/users
            - peer2.provider.company.com:/var/hyperledger/production
        depends_on:
            - orderer0.company.com
            - orderer1.company.com
            - orderer2.company.com
            - peer0.producer.company.com
        networks:
          behave:
             aliases:
               - ${CORE_PEER_NETWORKID}
        ports:
          - 9051:7051
          - 9053:7053
